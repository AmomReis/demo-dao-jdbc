package application;

import model.dao.DaoFactory;
import model.dao.SellerDao;
import model.entities.Department;
import model.entities.Seller;

import java.util.Date;
import java.util.List;
import java.util.Scanner;

/**
 * Main class responsible for testing CRUD operations on the Seller entity
 * using the DAO (Data Access Object) pattern.
 */
public class Main {
    public static void main(String[] args) {

        // Instantiate the Seller DAO using the factory
        SellerDao slrDao = DaoFactory.createSellerDao();
        Scanner sc = new Scanner(System.in);

        /**
         * Test 1 - Find a seller by ID
         * Retrieves and prints a specific seller from the database
         */
        System.out.println("\n________Test 1: seller findById________");
        Seller slr = slrDao.findById(2);
        System.out.println(slr);

        /**
         * Test 2 - Find sellers by department
         * Retrieves and prints all sellers belonging to a specific department
         */
        System.out.println("\n________Test 2: seller findByDepartment________");
        Department dpt = new Department(4, null); // Only ID is needed for query
        List<Seller> list = slrDao.findByDepartment(dpt);

        List<Seller> finalList = list;
        list.stream()
                .findAny()
                .ifPresentOrElse(
                        any -> finalList.forEach(System.out::println),
                        () -> System.out.println("No sellers found for this department...")
                );

        /**
         * Test 3 - Find all sellers
         * Retrieves and prints all sellers from the database
         */
        System.out.println("\n________Test 3: seller findByAll________");
        list = slrDao.findAll();
        list.forEach(System.out::println);

        /**
         * Test 4 - Insert a new seller
         * Creates a new seller and inserts it into the database
         */
        System.out.println("\n________Test 4: seller insert________");
        Seller newSeller = new Seller(null, "Greg", "greg@gmail.com", new Date(), 4000.0, dpt);
        slrDao.insert(newSeller); // ID will be generated by the database
        System.out.println("Inserted! New id = " + newSeller.getId());

        /**
         * Test 5 - Update an existing seller
         * Modifies and updates a seller's data in the database
         */
        System.out.println("\n________Test 5: seller update________");
        slr = slrDao.findById(1);
        slr.setName("Marie Curie");
        slrDao.update(slr);
        System.out.println("Update completed");

        /**
         * Test 6 - Delete a seller by ID
         * Asks the user for an ID and deletes the corresponding seller
         */
        System.out.println("\n________Test 6: seller delete________");
        System.out.print("Enter id for delete test: ");
        int id = sc.nextInt();
        slrDao.deleteById(id);
        System.out.println("Delete completed");

        // Close the scanner to avoid resource leak
        sc.close();
    }
}